# vim: syntax=python tabstop=4 expandtab
# coding: utf-8


__author__ = "Ino de Bruijn"
__license__ = "MIT"


def create_megahit_read_input_str(unit):
    if len(unit) == 2:
        return "-1 {unit[0]} -2 {unit[1]}".format(unit=unit)
    elif len(unit) == 1:
        return "-r {unit[0]}".format(unit=unit)
    else:
        raise(Exception("Units should either be paired library or single read library."))

rule megahit_assemble_sample:
    input:
        lambda wildcards: config["megahit_rules"]["samples"][wildcards.sample]
    output:
        "assembly/megahit/{assembly_params}/{sample}/final.contigs.fa"
    params:
        custom=lambda wildcards: config["megahit_rules"]["assembly_params"][wildcards.assembly_params],
        read_input_str=lambda wildcards: create_megahit_read_input_str(config["megahit_rules"]["samples"][wildcards.sample])
    shell:
        """
        {config[megahit_rules][load_env]}
        rm -rf assembly/megahit/{wildcards.assembly_params}/{wildcards.sample}/tmp
        megahit {params.custom} \
        {params.read_input_str} \
        -o assembly/megahit/{wildcards.assembly_params}/{wildcards.sample}/tmp
        mv assembly/megahit/{wildcards.assembly_params}/{wildcards.sample}/tmp/* \
           assembly/megahit/{wildcards.assembly_params}/{wildcards.sample}/
        """

rule megahit_pigz_assembly:
    input:
        assembly="assembly/megahit/{assembly_params}/{sample}/final.contigs.fa"
    output:
        "assembly/megahit/{assembly_params}/{sample}/final.contigs.fa.gz"
    params:
        """
            pigz {input.assembly}
        """

rule megahit_assemble_sample_all:
    input:
        expand("assembly/megahit/{assembly_params}/{sample}/final.contigs.fa", assembly_params=config["megahit_rules"]["assembly_params"], sample=config["megahit_rules"]["samples"])

def create_megahit_coassembly_paired_read_input_str(units):
    forwards = []
    reverses = []
    for i, unit in enumerate(units):
        if i % 2 == 0:
            forwards.append(unit)
        else:
            reverses.append(unit)
    assert(len(forwards) == len(reverses))
    forward_string = "-1 " + ",".join(forwards)
    
    reverse_string = " -2 " + ",".join(reverses)
    return forward_string + reverse_string

def all_units(sample_dict):
    all_units_list = []
    for sample_n, units in sample_dict.items():
        for unit in units:
            all_units_list.append(unit)
    return all_units_list

rule megahit_coassemble:
    input:
        all_units(config["megahit_rules"]["samples"])
    output:
        "assembly/megahit_coassembly/{assembly_params}/final.contigs.fa"
    params:
        custom=lambda wildcards: config["megahit_rules"]["coassembly_params"][wildcards.assembly_params]
    run:
        read_input_str = create_megahit_coassembly_paired_read_input_str(input)
        shell("""{config[megahit_rules][load_env]}
        rm -rf assembly/megahit/{wildcards.assembly_params}/tmp 
        megahit {params.custom} \
        {read_input_str} \
        -o assembly/megahit_coassembly/{wildcards.assembly_params}/tmp 
        mv assembly/megahit_coassembly/{wildcards.assembly_params}/tmp/* \
           assembly/megahit_coassembly/{wildcards.assembly_params}/
        """)

rule megahit_coassemble_all:
    input:
        expand("assembly/megahit_coassembly/{assembly_params}/final.contigs.fa", assembly_params=config["megahit_rules"]["coassembly_params"]) 

rule megahit_coassemble_split:
    input:
        "assembly/megahit_coassembly/{assembly_params}/final.contigs.fa"
    output: 
        dynamic("assembly/megahit_coassembly/{assembly_params}/parts/contigs.{part}.fasta")
    params:
        filter_length_script = config["megahit_rules"]["filter_length_script"],
        split_in_parts_script = config["megahit_rules"]["split_in_parts_script"],
        length_threshold = config["megahit_rules"]["coassembly_pre_annotation_length_threshold"],
        sequences_per_part = config["megahit_rules"]["coassembly_pre_annotation_sequences_per_part"],
        outdir = "assembly/megahit_coassembly/{assembly_params}/parts/"
    shell:
        """
           set +u; {config[megahit_rules][load_env]}; set -u;
           python {params.filter_length_script} --input_fasta {input} \
           -l {params.length_threshold} | python {params.split_in_parts_script} \
           --prefix "contigs" -o {params.outdir} {params.sequences_per_part}
        """ 

rule megahit_coassemble_split_all:
    input:
        dynamic(expand("assembly/megahit_coassembly/{assembly_params}/parts/contigs.{{part}}.fasta",
            assembly_params=config["megahit_rules"]["coassembly_params"]))
