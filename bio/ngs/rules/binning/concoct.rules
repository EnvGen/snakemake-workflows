import os
import glob
from snakemake.exceptions import MissingInputException
from snakemake.utils import report

# Check values in config file
CONFIG_REQS = ["assemblies", "mapper", "mapping_params", "concoct_params", "scripts_dir"]
if "concoct_rules" not in config:
    raise(Exception("concoct_rules key not in config file"))
for cr in CONFIG_REQS:
    if cr not in config["concoct_rules"]:
        raise(Exception("{cr} not in concoct_rules config file".format(cr=cr)))


#  add 10K cutup as references for bowtie2 to map against
config["bowtie2_rules"].setdefault("references", {}).update({a + "_10K": "concoct/{a}/cutup/contigs_10K.fasta".format(a=a) for a in config["concoct_rules"]["assemblies"]})

rule concoct_cutup_10K:
    input:
        lambda wildcards: config["concoct_rules"]["assemblies"][wildcards.assembly]
    output:
        "concoct/{assembly}/cutup/contigs_10K.fasta"
    params:
        chunk_size="10000",
        overlap="0"
    threads: 1
    shell:
        """
        {config[concoct_rules][load_env]}
        python {config[concoct_rules][scripts_dir]}/cut_up_fasta.py -c {params.chunk_size} -o {params.overlap} \
            -m {input} > {output}
        """

rule concoct_cutup_10K_all:
    input:
            expand("concoct/{assembly}/cutup/contigs_10K.fasta", assembly=config["concoct_rules"]["assemblies"])


rule concoct_map_10K_all:
    input:
        expand("mapping/{mapper}/{mapping_params}/{assembly}/samples/{sample}.sorted.removeduplicates.bam",
               assembly=config["bowtie2_rules"]["references"],
               sample=config["bowtie2_rules"]["samples"],
               mapping_params=config["concoct_rules"]["mapping_params"],
               mapper=config["concoct_rules"]["mapper"])


rule concoct_generate_coverage_table_10K:
    input:
        asm="concoct/{assembly}/cutup/contigs_10K.fasta",
        bedcovs=expand("mapping/{mapper}/{mapping_params}/{{assembly}}_10K/samples/{samples}.sorted.removeduplicates.coverage.tsv",
                   samples=sorted(config["bowtie2_rules"]["samples"]),
                   mapper=config["concoct_rules"]["mapper"],
                   mapping_params=config["concoct_rules"]["mapping_params"])
    output:
        "concoct/{assembly}/input/concoct_inputtable.tsv",
        "concoct/{assembly}/input/concoct_inputtableR.tsv"
    params:
        sample_names=sorted(config["bowtie2_rules"]["samples"])
    shell:
        """
        {config[concoct_rules][load_env]}
        python {config[concoct_rules][scripts_dir]}/gen_input_table.py --isbedfiles \
            --samplenames <(for s in {params.sample_names}; do echo $s; done) \
                {input.asm} {input.bedcovs} \
                > {output[0]} && \
        cut -f1,3- {output[0]} > {output[1]}
        """


rule concoct_inputtable_10K_all:
    input:
        expand("concoct/{assembly}/input/concoct_inputtableR.tsv", assembly=config["concoct_rules"]["assemblies"])


rule concoct_run_10K:
    """
    Run CONCOCT
    """
    input:
        asm="concoct/{assembly}/cutup/contigs_10K.fasta",
        input_table="concoct/{assembly}/input/concoct_inputtableR.tsv"
    output:
        clustering="concoct/{assembly}/output/{cparams}/clustering.csv"
    params:
        output_folder="concoct/{assembly}/output/{cparams}/",
        concoct_params=lambda wildcards: config["concoct_rules"]["concoct_params"][wildcards.cparams]
    shell:
        """
        {config[concoct_rules][load_env]}
        concoct {params.concoct_params} \
            --coverage_file {input.input_table} \
            --composition_file {input.asm} \
            -b {params.output_folder} && \
        ln -fs $(basename {params.output_folder}clustering_gt*.csv) \
               {output.clustering} && \
        touch -h {output.clustering}
        """


rule concoct_run_10K_all:
    """
    Run CONCOCT on all assemblies over all parameters specified in the config file.
    """
    input:
        expand("concoct/{assembly}/output/{concoct_params}/clustering.csv",
            assembly=config["concoct_rules"]["assemblies"],
            concoct_params=config["concoct_rules"]["concoct_params"])


#  add 10K cutup as assemblies for prodigal to predict genes for
config["prodigal_rules"]["assemblies"] = {a + "_10K": "concoct/{a}/cutup/contigs_10K.fasta".format(a=a) for a in config["concoct_rules"]["assemblies"]}

#  add prodigal predicted genes as query for rpsblast
config["rpsblast_rules"]["query_aas"] = {a: "annotation/prodigal/default-meta/{a}/proteins/proteins.faa".format(a=a) for a in config["prodigal_rules"]["assemblies"]}

#  add prodigal predicted genes as query for hmmer
config["hmmer_rules"]["query_aas"] = config["rpsblast_rules"]["query_aas"]

rule concoct_eval_cog_table:
    """
    Generate COG table from rpsblast output and concoct binning results
    """
    input:
        clust="concoct/{assembly}/output/{concoct_params}/clustering.csv",
        rpsblast="blast/rpsblast/default-concoct/cog/{assembly}_10K/rpsblast.out"
    output:
        "concoct/{assembly}/evaluation/scg/{concoct_params}/clustering_scg.tsv"
    shell:
        """
        {config[concoct_rules][load_env]}
        python {config[concoct_rules][scripts_dir]}/COG_table.py \
            -b {input.rpsblast} \
            -m {config[concoct_rules][scripts_dir]}/../scgs/scg_cogs_min0.97_max1.03_unique_genera.txt \
            -c {input.clust} \
            --cdd_cog_file {config[concoct_rules][scripts_dir]}/../scgs/cdd_to_cog.tsv \
            > {output}
        """

rule concoct_extract_approved_scg_bins:
    input:
        scg_tsvs=expand("concoct/{assembly}/evaluation/scg/{concoct_params}/clustering_scg.tsv",
            assembly=sorted(config["concoct_rules"]["assemblies"]),
            concoct_params=sorted(config["concoct_rules"]["concoct_params"])),
        asms=expand("concoct/{assembly}/cutup/contigs_10K.fasta",
            assembly=sorted(config["concoct_rules"]["assemblies"]),
            concoct_params=sorted(config["concoct_rules"]["concoct_params"]))
    output:
        dynamic("concoct/approved_scg_bins/{cluster_name}.fa")
    params:
        names=expand("{assembly}_{concoct_params}",
            assembly=sorted(config["concoct_rules"]["assemblies"]),
            concoct_params=sorted(config["concoct_rules"]["concoct_params"])),
        groups=expand("{assembly}",
            assembly=sorted(config["concoct_rules"]["assemblies"]),
            concoct_params=sorted(config["concoct_rules"]["concoct_params"]))
    shell:
        """
            {config[concoct_rules][load_env]}
            python {config[concoct_rules][scripts_dir]}/extract_scg_bins.py \
                --output_folder concoct/approved_scg_bins \
                --scg_tsvs {input.scg_tsvs} \
                --fasta_files {input.asms} \
                --names {params.names} \
                --groups {params.groups} \
                --max_missing_scg 5 \
                --max_multicopy_scg 2
         """

rule concoct_extract_approved_scg_bins_all:
    input:
        dynamic("concoct/approved_scg_bins/{cluster_name}.fa")


rule concoct_dnadiff_dist_matrix:
    """Get distance matrix from approved SCG bins"""
    input:
        clusters=dynamic("concoct/approved_scg_bins/{cluster_name}.fa")
    output:
        "concoct/dnadiff_dist_matrix/dist_matrix.tsv",
        "concoct/dnadiff_dist_matrix/hclust_heatmap.pdf",
        "concoct/dnadiff_dist_matrix/hclust_dendrogram.pdf"
    run:
        sorted_input = sorted(input.clusters)
        shell("""
        {config[concoct_rules][load_env]}
        python {config[concoct_rules][scripts_dir]}/dnadiff_dist_matrix.py \
            concoct/dnadiff_dist_matrix {sorted_input}
        """)


rule concoct_dnadiff_dist_matrix_report:
    input:
        dnadiff_output=rules.concoct_dnadiff_dist_matrix.output,
        readme_rst=glob.glob("report/concoct/dnadiff_dist_matrix/README.rst")
    output:
        "report/concoct/dnadiff_dist_matrix/index.html"
    params:
        readme_html="report/concoct/dnadiff_dist_matrix/README.html"
    shell:
        """
        cp --parents {input.dnadiff_output} report/
        (
            echo '<html><head><style>body {{ text-align: center }}</style></head><body>'
            for p in $(for i in {input.dnadiff_output}; do basename $i; done | sort); do
                echo "<a href='$p'>$p</a><br />"
            done
            for f in {input.readme_rst}; do
                echo "<iframe style='width: 80%; height: 100%;' frameBorder=0 src='README.html'></iframe>"
                rst2html.py $f > {params.readme_html}
            done
            echo '</body></html>'
        ) > {output}
        """


rule concoct_eval_cog_plot:
    """
    Plot COGs using COG table
    """
    input:
        "concoct/{assembly}/evaluation/scg/{concoct_params}/clustering_scg.tsv"
    output:
        "concoct/{assembly}/evaluation/scg/{concoct_params}/clustering_scg.pdf"
    shell:
        """
        {config[concoct_rules][load_env]}
        Rscript {config[concoct_rules][scripts_dir]}/COGPlot.R \
            -s {input} \
            -o {output}
        """


rule concoct_eval_cog_plot_all:
    input:
        expand("concoct/{assembly}/evaluation/scg/{concoct_params}/clustering_scg.pdf",
            assembly=config["concoct_rules"]["assemblies"],
            concoct_params=config["concoct_rules"]["concoct_params"])



rule concoct_eval_cog_report:
    input:
        expand("concoct/{assembly}/evaluation/scg/{concoct_params}/clustering_scg.pdf",
            assembly=config["concoct_rules"]["assemblies"],
            concoct_params=config["concoct_rules"]["concoct_params"])
    output:
        "report/concoct/cog_plots.html"
    shell:
        """
        cp --parents {input} report/
        (
            echo '<html><head><style>body {{ text-align: center }}</style></head><body>'
            for p in $(for i in {input}; do echo $i | cut -d/ -f2-; done | sort); do
                echo "<a href='$p'>$p</a><br />"
            done
            echo '</body></html>'
        ) > {output}
        """

rule concoct_eval_report:
    input:
        cog_html=rules.concoct_eval_cog_report.output,
        dnadiff_html=rules.concoct_dnadiff_dist_matrix_report.output
    output:
        "report/concoct/index.html"
    shell:
        """
        (
            echo '<html><head><style>body {{ text-align: center }}</style></head><body>'
            echo "<a href='cog_plots.html'>COG Plots</a><br />"
            echo "<a href='dnadiff_dist_matrix/index.html'>DNA Diff matrix as constructed with MUMmer</a><br />"
            echo '</body></html>'
        ) > {output}
        """


rule concoct_eval_cog_report_flashy:
    input:
        cog_plots=expand("concoct/{assembly}/evaluation/scg/{concoct_params}/clustering_scg.pdf",
            assembly=config["concoct_rules"]["assemblies"],
            concoct_params=config["concoct_rules"]["concoct_params"])
    output:
        html="report/concoct/cog_plots_flashy.html"
    run:
        dict_cp = {"{a}-{cp}".format(a=cp.split("/")[1],cp=cp.split("/")[4]):cp for cp in input.cog_plots}
        cp_ids = "\n".join(["- " + cp + "_" for cp in sorted(dict_cp.keys())])
        report("""
        =========
        SCG Plots
        =========
        {cp_ids}
        """, output.html, **dict_cp)
