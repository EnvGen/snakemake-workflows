import os
import glob
from snakemake.exceptions import MissingInputException
from snakemake.utils import report

# Check values in config file
CONFIG_REQS = ["assemblies", "mapper", "mapping_params", "concoct_params", "scripts_dir"]
if "concoct_rules" not in config:
    raise(Exception("concoct_rules key not in config file"))
for cr in CONFIG_REQS:
    if cr not in config["concoct_rules"]:
        raise(Exception("{cr} not in concoct_rules config file".format(cr=cr)))


#  add 10K cutup as references for bowtie2 to map against
config["bowtie2_rules"].setdefault("references", {}).update({a + "_10K": "concoct/{a}/cutup/contigs_10K.fasta".format(a=a) for a in config["concoct_rules"]["assemblies"]})

rule concoct_cutup_10K:
    input:
        lambda wildcards: config["concoct_rules"]["assemblies"][wildcards.assembly]
    output:
        "concoct/{assembly}/cutup/contigs_10K.fasta"
    params:
        chunk_size="10000",
        overlap="0"
    threads: 1
    shell:
        """
        {config[concoct_rules][load_env]}
        python {config[concoct_rules][scripts_dir]}/cut_up_fasta.py -c {params.chunk_size} -o {params.overlap} \
            -m {input} > {output}
        """

rule concoct_cutup_10K_all:
    input:
            expand("concoct/{assembly}/cutup/contigs_10K.fasta", assembly=config["concoct_rules"]["assemblies"])


rule concoct_map_10K_all:
    input:
        expand("mapping/{mapper}/{mapping_params}/{assembly}/samples/{sample}.sorted.removeduplicates.bam",
               assembly=config["bowtie2_rules"]["references"],
               sample=config["bowtie2_rules"]["samples"],
               mapping_params=config["concoct_rules"]["mapping_params"],
               mapper=config["concoct_rules"]["mapper"])


rule concoct_generate_coverage_table_10K:
    input:
        asm="concoct/{assembly}/cutup/contigs_10K.fasta",
        bedcovs=expand("mapping/{mapper}/{mapping_params}/{{assembly}}_10K/samples/{samples}.sorted.removeduplicates.coverage.tsv",
                   samples=sorted(config["bowtie2_rules"]["samples"]),
                   mapper=config["concoct_rules"]["mapper"],
                   mapping_params=config["concoct_rules"]["mapping_params"])
    output:
        "concoct/{assembly}/input/concoct_inputtable.tsv",
        "concoct/{assembly}/input/concoct_inputtableR.tsv"
    params:
        sample_names=sorted(config["bowtie2_rules"]["samples"])
    shell:
        """
        {config[concoct_rules][load_env]}
        python {config[concoct_rules][scripts_dir]}/gen_input_table.py --isbedfiles \
            --samplenames <(for s in {params.sample_names}; do echo $s; done) \
                {input.asm} {input.bedcovs} \
                > {output[0]} && \
        cut -f1,3- {output[0]} > {output[1]}
        """


rule concoct_inputtable_10K_all:
    input:
        expand("concoct/{assembly}/input/concoct_inputtableR.tsv", assembly=config["concoct_rules"]["assemblies"])


rule concoct_run_10K:
    """
    Run CONCOCT
    """
    input:
        asm="concoct/{assembly}/cutup/contigs_10K.fasta",
        input_table="concoct/{assembly}/input/concoct_inputtableR.tsv"
    output:
        clustering="concoct/{assembly}/output/{cparams}/clustering.csv"
    params:
        output_folder="concoct/{assembly}/output/{cparams}/",
        concoct_params=lambda wildcards: config["concoct_rules"]["concoct_params"][wildcards.cparams]
    shell:
        """
        {config[concoct_rules][load_env]}
        concoct {params.concoct_params} \
            --coverage_file {input.input_table} \
            --composition_file {input.asm} \
            -b {params.output_folder} && \
        ln -fs $(basename {params.output_folder}clustering_gt*.csv) \
               {output.clustering} && \
        touch -h {output.clustering}
        """


rule concoct_run_10K_all:
    """
    Run CONCOCT on all assemblies over all parameters specified in the config file.
    """
    input:
        expand("concoct/{assembly}/output/{concoct_params}/clustering.csv",
            assembly=config["concoct_rules"]["assemblies"],
            concoct_params=config["concoct_rules"]["concoct_params"])


rule merge_concoct_results:
    input:
        "concoct/{assembly}/output/{concoct_params}/clustering.csv"
    output:
        "concoct/{assembly}/output/{concoct_params}/clustering_merged.csv"
    shell:
        """
            {config[concoct_rules][load_env]}
            python {config[toolbox_dir]}/scripts/concoct/majority_merge_cutup_clustering.py {input} > {output}
        """

