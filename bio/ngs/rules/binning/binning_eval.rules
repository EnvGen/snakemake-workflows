import itertools

rule concoct_merge_cutup_contigs:
    input:
        "concoct/{assembly}/output_{quant}/{concoct_params}/clustering.csv"
    output:
        "concoct/{assembly}/output_{quant}/{concoct_params}/clustering_nocutup.csv"
    params:
        merge_script = config["concoct_rules"]["merge_clustering_script"],
        load_env=lambda wildcards: config["concoct_rules"]["concoct_params"][wildcards.concoct_params]["load_env"]
    shell:
        """ set +u; {params.load_env}; set -u
            python {params.merge_script} {input} > {output}
         """


rule binning_extract_all_bins_nocutup:
    input:
        clustering="binning/{binning_alg}/{assembly}/output_{quant}/{binning_params}/clustering_nocutup.csv",
        asm=lambda wildcards: config["concoct_rules"]["assemblies"][wildcards.assembly]
    output:
        clusters = dynamic("binning/{binning_alg}/{assembly}/output_{quant}/{binning_params}/all_bins_nocutup/{cluster_name}.fa")
    params:
        extract_bins = config["binning_rules"]["extract_bins_script"],
        output_path = "binning/{binning_alg}/{assembly}/output_{quant}/{binning_params}/all_bins_nocutup",
        load_env=lambda wildcards: config["binning_rules"]["load_default_env"]
    shell:
        """
            set +u; {params.load_env}; set -u
            mkdir -p {params.output_path}
            python {params.extract_bins} {input.asm} {input.clustering} --output_path {params.output_path}
        """

rule concoct_checkm:
    input:
        # Input is actully all the *.fa files within all_bins_nocutup, but the multiple wildcards
        # within the dynamic definition never worked since it is missing output files containing '{cluster_name}.fa'
        "concoct/{assembly}/output_{quant}/{concoct_params}/all_bins_nocutup/0.fa"
    output:
        "concoct/{assembly}/output_{quant}/{concoct_params}/checkm_output/stats.tsv"
    params:
        input_dir = "concoct/{assembly}/output_{quant}/{concoct_params}/all_bins_nocutup",
        output_dir_tmp = "concoct/{assembly}/output_{quant}/{concoct_params}/checkm_output_TMP/",
        output_dir = "concoct/{assembly}/output_{quant}/{concoct_params}/checkm_output/",
        load_env=lambda wildcards: config["concoct_rules"]["concoct_params"][wildcards.concoct_params]["load_env"]
    shell:
        """ set +u; {params.load_env}; set -u
            mkdir -p {params.output_dir_tmp}
            checkm lineage_wf -t 8 -x fa --tab_table -f {output} {params.input_dir} {params.output_dir_tmp} 
            mv {params.output_dir_tmp}* {params.output_dir}
            rm -r {params.output_dir_tmp} """

rule metabat_clustering_file:
    input:
        "metabat/{assembly}/output_{quant}/{binning_params}/all_bins_cutup.1.fa"
    output:
        clusters = "metabat/{assembly}/output_{quant}/{binning_params}/clustering.csv"
    params:
        input_files = "metabat/{assembly}/output_{quant}/{binning_params}/all_bins_cutup.*.fa",
    shell:
        """rm {output}
           for file in {params.input_files}; do bin_id=`echo $file | cut -f 2 -d '.'`; grep '^>' $file | sed 's/^>//g' | sed "s/$/,$bin_id/g" >> {output}; done"""

rule metabat_merge_cutup_contigs:
    input:
        "metabat/{assembly}/output_{quant}/{binning_params}/clustering.csv"
    output:
        "metabat/{assembly}/output_{quant}/{binning_params}/clustering_nocutup.csv"
    params:
        merge_script = config["concoct_rules"]["merge_clustering_script"],
        load_env=lambda wildcards: config["metabat_rules"]["load_default_env"]
    shell:
        """ set +u; {params.load_env}; set -u
            python {params.merge_script} {input} > {output}
         """
rule metabat_extract_all_bins_nocutup:
    input:
        clustering="metabat/{assembly}/output_{quant}/{binning_params}/clustering_nocutup.csv",
        asm=lambda wildcards: config["concoct_rules"]["assemblies"][wildcards.assembly]
    output:
        clusters = dynamic("metabat/{assembly}/output_{quant}/{binning_params}/all_bins_nocutup/{cluster_name}.fa")
    params:
        extract_bins = config["concoct_rules"]["extract_bins_script"],
        output_path = "metabat/{assembly}/output_{quant}/{binning_params}/all_bins_nocutup",
        load_env=config["metabat_rules"]["load_default_env"]
    shell:
        """
            set +u; {params.load_env}; set -u
            mkdir -p {params.output_path}
            python {params.extract_bins} {input.asm} {input.clustering} --output_path {params.output_path}
        """

rule metabat_checkm:
    input:
        # Input is actully all the *.fa files within all_bins_nocutup, but the multiple wildcards
        # within the dynamic definition never worked since it is missing output files containing '{cluster_name}.fa'
        "metabat/{assembly}/output_{quant}/{binning_params}/all_bins_nocutup/1.fa"
    output:
        "metabat/{assembly}/output_{quant}/{binning_params}/checkm_output/stats.tsv"
    params:
        input_dir = "metabat/{assembly}/output_{quant}/{binning_params}/all_bins_nocutup",
        output_dir_tmp = "metabat/{assembly}/output_{quant}/{binning_params}/checkm_output_TMP/",
        output_dir = "metabat/{assembly}/output_{quant}/{binning_params}/checkm_output/",
        load_env=config["metabat_rules"]["load_default_env"]
    shell:
        """ set +u; {params.load_env}; set -u
            mkdir -p {params.output_dir_tmp}
            checkm lineage_wf -t 8 -x fa --tab_table -f {output} {params.input_dir} {params.output_dir_tmp} 
            mv {params.output_dir_tmp}* {params.output_dir}
            rm -r {params.output_dir_tmp} """

rule metabat_extract_approved_scg_bins:
    input:
        one_fa = "metabat/{assembly}/output_{quant}/{binning_params}/all_bins_nocutup/1.fa",
        checkm_stats = "metabat/{assembly}/output_{quant}/{binning_params}/checkm_output/stats.tsv"
    output:
        "metabat/{assembly}/output_{quant}/{binning_params}/all_approved_bins_nocutup/default_output.txt"
    params:
        approve_bins_script = config["concoct_rules"]["approve_bins_script"],
        input_dir = "metabat/{assembly}/output_{quant}/{binning_params}/all_bins_nocutup",
        output_dir = "metabat/{assembly}/output_{quant}/{binning_params}/all_approved_bins_nocutup",
        min_comp = config["concoct_rules"]["min_completeness"],
        max_cont = config["concoct_rules"]["max_contamination"],
        load_env=lambda wildcards: config["metabat_rules"]["binning_params"][wildcards.binning_params]["load_env"]
    shell:
        """ set +u {params.load_env}; set -u
            python {params.approve_bins_script} {params.input_dir} {input.checkm_stats} {params.output_dir} --min_completeness {params.min_comp} --max_contamination {params.max_cont}
            touch {output}
        """
rule concoct_extract_approved_scg_bins:
    input:
        one_fa = "concoct/{assembly}/output_{quant}/{concoct_params}/all_bins_nocutup/0.fa",
        checkm_stats = "concoct/{assembly}/output_{quant}/{concoct_params}/checkm_output/stats.tsv"
    output:
        "concoct/{assembly}/output_{quant}/{concoct_params}/all_approved_bins_nocutup/default_output.txt"
    params:
        approve_bins_script = config["concoct_rules"]["approve_bins_script"],
        input_dir = "concoct/{assembly}/output_{quant}/{concoct_params}/all_bins_nocutup",
        output_dir = "concoct/{assembly}/output_{quant}/{concoct_params}/all_approved_bins_nocutup",
        min_comp = config["concoct_rules"]["min_completeness"],
        max_cont = config["concoct_rules"]["max_contamination"],
        load_env=lambda wildcards: config["concoct_rules"]["concoct_params"][wildcards.concoct_params]["load_env"]
    shell:
        """ set +u {params.load_env}; set -u
            python {params.approve_bins_script} {params.input_dir} {input.checkm_stats} {params.output_dir} --min_completeness {params.min_comp} --max_contamination {params.max_cont}
            touch {output}
        """

rule concoct_extract_approved_scg_bins_all:
    input:
        dynamic("concoct/approved_scg_bins/{cluster_name}.fa")

config["concoct_rules"]["approved_bins"] = []
for cluster_file in glob.glob("concoct/approved_scg_bins/*.fa"):
    config["concoct_rules"]["approved_bins"].append(cluster_file)

rule concoct_dnadiff_dist_matrix:
    """Get distance matrix from approved SCG bins"""
    input:
        clusters = lambda wildcards: config["concoct_rules"]["approved_bins"]
    output:
        "concoct/dnadiff_dist_matrix/dist_matrix.tsv",
        "concoct/dnadiff_dist_matrix/hclust_heatmap.pdf",
        "concoct/dnadiff_dist_matrix/hclust_dendrogram.pdf"
    params:
        tmp_dir = config["concoct_rules"]["dnadiff_tmp_dir"],
        load_env=lambda wildcards: config["concoct_rules"]["concoct_params"][wildcards.concoct_params]["load_env"]
    run:
        sorted_input = sorted(input.clusters)
        shell("""
        set +u; {params.load_env}; set -u
        mkdir -p {params.tmp_dir}
        python {config[concoct_rules][scripts_dir]}/dnadiff_dist_matrix.py \
            {params.tmp_dir} {sorted_input}
        mv {params.tmp_dir}/dist_matrix.tsv {output[0]} 
        mv {params.tmp_dir}/hclust_heatmap.pdf {output[1]}
        mv {params.tmp_dir}/hclust_dendrogram.pdf {output[2]}
        """)


rule concoct_dnadiff_dist_matrix_report:
    input:
        dnadiff_output=rules.concoct_dnadiff_dist_matrix.output,
        readme_rst=glob.glob("report/concoct/dnadiff_dist_matrix/README.rst")
    output:
        "report/concoct/dnadiff_dist_matrix/index.html"
    params:
        readme_html="report/concoct/dnadiff_dist_matrix/README.html"
    shell:
        """
        cp --parents {input.dnadiff_output} report/
        (
            echo '<html><head><style>body {{ text-align: center }}</style></head><body>'
            for p in $(for i in {input.dnadiff_output}; do basename $i; done | sort); do
                echo "<a href='$p'>$p</a><br />"
            done
            for f in {input.readme_rst}; do
                echo "<iframe style='width: 80%; height: 100%;' frameBorder=0 src='README.html'></iframe>"
                rst2html.py $f > {params.readme_html}
            done
            echo '</body></html>'
        ) > {output}
        """

rule concoct_eval_cog_plot_merged:
    """
    Plot COGs using COG table
    """
    input:
        "concoct/{assembly}/evaluation/scg/{concoct_params}/clustering_scg_merged.tsv"
    output:
        "concoct/{assembly}/evaluation/scg/{concoct_params}/clustering_scg_merged.pdf"
    params:
        load_env=lambda wildcards: config["concoct_rules"]["concoct_params"][wildcards.concoct_params]["load_env"]
    shell:
        """
        set +u; {params.load_env}; set -u
        Rscript {config[concoct_rules][scripts_dir]}/COGPlot.R \
            -s {input} \
            -o {output}
        """


rule concoct_eval_cog_plot:
    """
    Plot COGs using COG table
    """
    input:
        "concoct/{assembly}/evaluation/scg/{concoct_params}/clustering_scg.tsv"
    output:
        "concoct/{assembly}/evaluation/scg/{concoct_params}/clustering_scg.pdf"
    params:
        load_env=lambda wildcards: config["concoct_rules"]["concoct_params"][wildcards.concoct_params]["load_env"]
    shell:
        """
        set +u; {params.load_env}; set -u
        Rscript {config[concoct_rules][scripts_dir]}/COGPlot.R \
            -s {input} \
            -o {output}
        """


rule concoct_eval_cog_plot_all:
    input:
        expand("concoct/{assembly}/evaluation/scg/{concoct_params}/clustering_scg.pdf",
            assembly=config["concoct_rules"]["assemblies"],
            concoct_params=config["concoct_rules"]["concoct_params"])


rule concoct_eval_cog_report:
    input:
        expand("concoct/{assembly}/evaluation/scg/{concoct_params}/clustering_scg.pdf",
            assembly=config["concoct_rules"]["assemblies"],
            concoct_params=config["concoct_rules"]["concoct_params"])
    output:
        "report/concoct/cog_plots.html"
    shell:
        """
        cp --parents {input} report/
        (
            echo '<html><head><style>body {{ text-align: center }}</style></head><body>'
            for p in $(for i in {input}; do echo $i | cut -d/ -f2-; done | sort); do
                echo "<a href='$p'>$p</a><br />"
            done
            echo '</body></html>'
        ) > {output}
        """

rule concoct_eval_report:
    input:
        cog_html=rules.concoct_eval_cog_report.output,
        dnadiff_html=rules.concoct_dnadiff_dist_matrix_report.output
    output:
        "report/concoct/index.html"
    shell:
        """
        (
            echo '<html><head><style>body {{ text-align: center }}</style></head><body>'
            echo "<a href='cog_plots.html'>COG Plots</a><br />"
            echo "<a href='dnadiff_dist_matrix/index.html'>DNA Diff matrix as constructed with MUMmer</a><br />"
            echo '</body></html>'
        ) > {output}
        """

rule concoct_eval_cog_report_flashy:
    input:
        cog_plots=expand("concoct/{assembly}/evaluation/scg/{concoct_params}/clustering_scg.pdf",
            assembly=config["concoct_rules"]["assemblies"],
            concoct_params=config["concoct_rules"]["concoct_params"])
    output:
        html="report/concoct/cog_plots_flashy.html"
    run:
        dict_cp = {"{a}-{cp}".format(a=cp.split("/")[1],cp=cp.split("/")[4]):cp for cp in input.cog_plots}
        cp_ids = "\n".join(["- " + cp + "_" for cp in sorted(dict_cp.keys())])
        report("""
        =========
        SCG Plots
        =========
        {cp_ids}
        """, output.html, **dict_cp)


rule concoct_eval_cog_table_merged:
    """
    Generate COG table from rpsblast output and concoct binning results
    """
    input:
        clust="concoct/{assembly}/output/{concoct_params}/clustering_merged.csv",
        rpsblast="blast/rpsblast/default-concoct/cog/{assembly}/rpsblast.out"
    output:
        "concoct/{assembly}/evaluation/scg/{concoct_params}/clustering_scg_merged.tsv"
    params:
        load_env=lambda wildcards: config["concoct_rules"]["concoct_params"][wildcards.concoct_params]["load_env"]
    shell:
        """
        set +u {params.load_env}; set -u
        python {config[concoct_rules][scripts_dir]}/COG_table.py \
            -b {input.rpsblast} \
            -m {config[concoct_rules][scripts_dir]}/../scgs/scg_cogs_min0.97_max1.03_unique_genera.txt \
            -c {input.clust} \
            --cdd_cog_file {config[concoct_rules][scripts_dir]}/../scgs/cdd_to_cog.tsv \
            > {output}
        """

rule concoct_eval_merged:
    """
    Plot COGs using COG table for only merged
    """
    input:
        expand("concoct/{assembly}/evaluation/scg/{concoct_params}/clustering_scg_merged.pdf",
                assembly=config["concoct_rules"]["assemblies"],
                concoct_params = config["concoct_rules"]["concoct_params"])

rule concoct_eval_all:
    """
    Plot COGs using COG table for both merged and cutup
    """
    input:
        expand("concoct/{assembly}/evaluation/scg/{concoct_params}/clustering_scg_merged.pdf",
                assembly=config["concoct_rules"]["assemblies"],
                concoct_params = config["concoct_rules"]["concoct_params"]),
        expand("concoct/{assembly}/evaluation/scg/{concoct_params}/clustering_scg.pdf",
                assembly=config["concoct_rules"]["assemblies"],
                concoct_params = config["concoct_rules"]["concoct_params"])

