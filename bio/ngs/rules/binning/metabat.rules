import os
import glob
from snakemake.exceptions import MissingInputException
from snakemake.utils import report

# Check values in config file
CONFIG_REQS = ["assemblies", "mapper", "mapping_params", "concoct_params", "scripts_dir"]
if "concoct_rules" not in config:
    raise(Exception("concoct_rules key not in config file"))
for cr in CONFIG_REQS:
    if cr not in config["concoct_rules"]:
        raise(Exception("{cr} not in concoct_rules config file".format(cr=cr)))


#  add 10K cutup as references for bowtie2 to map against
#config["bowtie2_rules"].setdefault("references", {}).update({a + "_10K": "concoct/{a}/cutup/contigs_10K.fasta".format(a=a) for a in config["concoct_rules"]["assemblies"]})

rule metabat_cutup_10K:
    input:
        "concoct/{assembly}/cutup/contigs_10K.fasta.gz"
    output:
        "metabat/{assembly}/input_10K_default/contigs.fasta.gz"
    shell:
        """
        ln -s {input} {output}
        """

rule metabat_generate_coverage_table_10K:
    input:
        bam=expand("mapping/{mapper}/{mapping_params}/{{assembly}}_10K/samples/{samples}.sorted.removeduplicates.bam",
                   samples=sorted(config["bowtie2_rules"]["samples"]),
                   mapper=config["concoct_rules"]["mapper"],
                   mapping_params=config["concoct_rules"]["mapping_params"])
    output:
        "metabat/{assembly}/input_10K_default/depth.tsv"
    params:
        sample_names=sorted(config["bowtie2_rules"]["samples"]),
    shell:
        """
        set +u; {config[metabat_rules][load_default_env]}; set -u;
        jgi_summarize_bam_contig_depths --outputDepth {output} {input.bam}        
        """

rule metabat_run_10K:
    input:
        asm="metabat/{assembly}/input_{quant}/contigs.fasta.gz",
        input_table="metabat/{assembly}/input_{quant}/depth.tsv"
    output:
        default_output="metabat/{assembly}/output_{quant}/{cparams}/binning_done.txt",
        bin1="metabat/{assembly}/output_{quant}/{cparams}/all_cutup_bins/bin.1.fa"
    params:
        output_folder="metabat/{assembly}/output_{quant}/{cparams}/all_cutup_bins",
        binning_params=lambda wildcards: config["metabat_rules"]["binning_params"][wildcards.cparams]["commandline_params"],
        load_env=lambda wildcards: config["metabat_rules"]["binning_params"][wildcards.cparams]["load_env"]
    shell:
        """
        set +u; {params.load_env}; set -u;
        mkdir -p {params.output_folder}
        metabat -i {input.asm} -o {params.output_folder}/bin \
        -a {input.input_table} {params.binning_params} -t 16 --seed 11 -v &&
        touch {output.default_output}
        """

rule metabat_clustering_file:
    input:
        "metabat/{assembly}/output_{quant}/{binning_params}/all_cutup_bins/bin.1.fa"
    output:
        clusters = "metabat/{assembly}/output_{quant}/{binning_params}/clustering.csv"
    params:
        input_files = "metabat/{assembly}/output_{quant}/{binning_params}/all_bins_cutup/bin.*.fa",
    shell:
        """rm {output}
           for file in {params.input_files}; do bin_id=`echo $file | cut -f 2 -d '.'`; grep '^>' $file | sed 's/^>//g' | sed "s/$/,$bin_id/g" >> {output}; done"""


rule merge_metabat_results:
    input:
        "metabat/{assembly}/output_{quant}/{binning_params}/clustering.csv"
    output:
        "metabat/{assembly}/output_{quant}/{binning_params}/clustering_merged.csv"
    shell:
        """
            {config[metabat_rules][load_default_env]}
            python {config[toolbox_dir]}/scripts/concoct/majority_merge_cutup_clustering.py {input} > {output}
        """

