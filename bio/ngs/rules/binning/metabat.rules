import os
import glob
from snakemake.exceptions import MissingInputException
from snakemake.utils import report

# Check values in config file
CONFIG_REQS = ["assemblies", "mapper", "mapping_params", "concoct_params", "scripts_dir"]
if "concoct_rules" not in config:
    raise(Exception("concoct_rules key not in config file"))
for cr in CONFIG_REQS:
    if cr not in config["concoct_rules"]:
        raise(Exception("{cr} not in concoct_rules config file".format(cr=cr)))


#  add 10K cutup as references for bowtie2 to map against
#config["bowtie2_rules"].setdefault("references", {}).update({a + "_10K": "binning/concoct/{a}/cutup/contigs_10K.fasta".format(a=a) for a in config["concoct_rules"]["assemblies"]})

rule metabat_cutup_10K:
    input:
        "binning/concoct/{assembly}/cutup/contigs_10K.fasta.gz"
    output:
        "binning/metabat/{assembly}/input_{quant}/contigs_10K.fasta.gz"
    shell:
        """
        ln -s ../../../../{input} {output}
        """

rule metabat_default_inputtableR:
    input:
        "binning/concoct/{assembly}/input_{quant}/concoct_inputtableR.tsv"
    output:
        "binning/metabat/{assembly}/input_{quant}/concoct_inputtableR.sorted.tsv"
    shell:
        """
        paste <(cut -f 1 {input} | cut -f 2 -d '_') {input} | sort -n | sed "s/^[0-9]*\s//" > {output}
        """

rule metabat_default_inputtable:
    input:
        "binning/concoct/{assembly}/input_{quant}/concoct_inputtable.tsv"
    output:
        "binning/metabat/{assembly}/input_{quant}/concoct_inputtable.sorted.tsv"
    shell:
        """
        paste <(cut -f 1 {input} | cut -f 2 -d '_') {input} | sort -n | sed "s/^[0-9]*\s//" > {output}
        """

rule metabat_generate_coverage_table_10K:
    input:
        bam=lambda wildcards: expand("mapping/{mapper}/{mapping_params}/{assembly}_10K/samples/{samples}.sorted.removeduplicates.bam",
                   samples=sorted(config["bowtie2_rules"]["samples"]),
                   mapper=config["concoct_rules"]["mapper"],
                   mapping_params=config["concoct_rules"]["mapping_params"],
                   assembly=wildcards.assembly)
    output:
        "binning/metabat/{assembly}/input_{quant}/depth_10K.tsv"
    params:
        sample_names=sorted(config["bowtie2_rules"]["samples"]),
    shell:
        """
        set +u; {config[metabat_rules][load_default_env]}; set -u;
        jgi_summarize_bam_contig_depths --outputDepth {output} {input.bam}
        """

rule metabat_run:
    input:
        asm="binning/metabat/{assembly}/input_{quant}/contigs_10K.fasta.gz",
        input_table=lambda wildcards: "binning/metabat/{assembly}/input_{quant}/".format(assembly=wildcards.assembly, quant=wildcards.quant) + config["metabat_rules"]["quant_params"][wildcards.quant]["input_table"]
    output:
        default_output="binning/metabat/{assembly}/output_{quant}/{cparams}/binning_done.txt",
        bin1="binning/metabat/{assembly}/output_{quant}/{cparams}/all_bins_cutup/bin.1.fa"
    params:
        output_folder=lambda wildcards: "binning/metabat/{assembly}/output_{quant}/{cparams}/all_bins_cutup",
        binning_params=lambda wildcards: config["metabat_rules"]["binning_params"][wildcards.cparams]["commandline_params"],
        quant_binning_params=lambda wildcards: config["metabat_rules"]["quant_commandline_params"][wildcards.quant],
        load_env=lambda wildcards: config["metabat_rules"]["binning_params"][wildcards.cparams]["load_env"]
    shell:
        """
        set +u; {params.load_env}; set -u;
        mkdir -p {params.output_folder}
        metabat -i {input.asm} -o {params.output_folder}/bin \
        -a {input.input_table} {params.binning_params} {params.quant_binning_params} -t 16 --seed 11 -v &&
        touch {output.default_output}
        """

rule metabat_clustering_file:
    input:
        "binning/metabat/{assembly}/output_{quant}/{binning_params}/all_bins_cutup/bin.1.fa"
    output:
        clusters = "binning/metabat/{assembly}/output_{quant}/{binning_params}/clustering.csv"
    params:
        input_files = "binning/metabat/{assembly}/output_{quant}/{binning_params}/all_bins_cutup/bin.*.fa",
    shell:
        """rm {output}
           for file in {params.input_files}; do bin_id=`echo $file | cut -f 2 -d '.'`; grep '^>' $file | sed 's/^>//g' | sed "s/$/,$bin_id/g" >> {output}; done"""

