# vim: syntax=python tabstop=4 expandtab
# coding: utf-8


"""
Rules for modifying SAM or BAM files. Need samtools in your path and config
needs to set picard location with jars in 'picard_jars'.

For usage, include this in your workflow.
"""

import os


__author__ = "Johannes KÃ¶ster, Ino de Bruijn"
__license__ = "MIT"


rule bam_index:
    input:
        "{prefix}.bam"
    output:
        "{prefix}.bam.bai"
    shell:
        """
        {config[samtools_rules][load_env]}
        samtools index {input}
        """


rule bam_sort:
    input:
        "{prefix}.bam"
    output:
        "{prefix}.sorted.bam"
    params:
        threads = config["samtools_rules"]["threads_for_sorting"],
    shell:
        """
        {config[samtools_rules][load_env]}
        samtools sort -m 7G -@ {params.threads} -O 'bam' {input} > {output}
        """


rule bam_sort_name:
    input:
        "{prefix}.bam"
    output:
        "{prefix}.namesorted.bam"
    params:
        threads = config["samtools_rules"]["threads_for_sorting"]
    shell:
        """
        {config[samtools_rules][load_env]}
        samtools sort -m 7G -@ {params.threads} -O 'bam' -n {input} > {output}
        """

rule bam_stats:
    input:
        "{prefix}.bam"
    output:
        "{prefix}.stats.txt"
    shell:
        """
        {config[samtools_rules][load_env]}
        samtools idxstats {input} > {output}
        """


rule bam_measure_insert_size:
    input:
        "{prefix}.sorted.bam"
    output:
        txt="{prefix}.insert_size.txt",
        pdf="{prefix}.insert_size_histogram.pdf"
    shell:
        """
        java -jar {config[samtools_rules][picard_jars]}/CollectInsertSizeMetrics.jar \
            INPUT={input} \
            OUTPUT={output.txt} \
            HISTOGRAM_FILE={output.pdf}
        """


rule fasta_index:
    input:
        "{prefix}.{suffix}"
    output:
        "{prefix}.{suffix,(fasta|fa)}.fai"
    shell:
        """
        {config[samtools_rules][load_env]}
        samtools faidx {input}
        """


rule fasta_dict:
    input:
        "{prefix}.fasta"
    output:
        "{prefix}.dict"
    shell:
        """
        java -jar {config[samtools_rules][picard_jars]}/CreateSequenceDictionary.jar \
            REFERENCE={input} \
            OUTPUT={output}
        """


rule remove_mark_duplicates:
    input:
        "{prefix}.sorted.bam"
    output:
        "{prefix}.sorted.removeduplicates.bam",
        "{prefix}.sorted.removeduplicates.metrics"
    log:
        "{prefix}.sorted.removeduplicates.log"
    params:
        java_opt="-Xms2g -Xmx31g -XX:MaxPermSize=2g -XX:+CMSClassUnloadingEnabled",
        threads="4" # hardcoded since max memory was hard coded to 31
    shell:
        """
        java {params.java_opt} -XX:ParallelGCThreads={params.threads} \
            -jar {config[samtools_rules][picard_jars]}/MarkDuplicates.jar \
            INPUT={input} \
            OUTPUT={output[0]} \
            COMPRESSION_LEVEL=6 \
            METRICS_FILE={output[1]} \
            AS=TRUE \
            VALIDATION_STRINGENCY=LENIENT \
            MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=1000 \
            REMOVE_DUPLICATES=TRUE 2> {log}
        """


rule bedtools_coverage:
    input:
        "{prefix}.bam"
    output:
        "{prefix}.coverage.tsv"
    shell:
        """
        {config[samtools_rules][load_env]}
        genomeCoverageBed -ibam {input} > {output}
        """


rule sample_merge:
    """
    Merge bam files for multiple units into one for the given sample.
    If the sample has only one unit, a symlink will be created.
    """
    input:
        lambda wildcards: expand(
            "mapping/bowtie2/{mapping_params}/{reference}/units/{unit}.sorted.removeduplicates.bam",
            unit=config["bowtie2_rules"]["samples"][wildcards.sample],
            mapping_params=wildcards.mapping_params,
            reference=wildcards.reference)
    output:
        "mapping/bowtie2/{mapping_params}/{reference}/samples/{sample}.sorted.removeduplicates.bam"
    run:
        if len(input) > 1:
            shell("{config[samtools_rules][load_env]} && "
                  "samtools merge {output} {input}")
        else:
            shell("ln -fs ../units/{basename} {{output}} && touch -h "
                  "{{output}}".format(basename=os.path.basename(input[0])))

ruleorder: remove_mark_duplicates > sample_merge

rule sample_merge_no_rmdup:
    """
    Merge bam files for multiple units into one for the given sample.
    If the sample has only one unit, a symlink will be created.
    """
    input:
        lambda wildcards: expand(
            "mapping/bowtie2/{mapping_params}/{reference}/units/{unit}.bam",
            unit=config["bowtie2_rules"]["samples"][wildcards.sample],
            mapping_params=wildcards.mapping_params,
            reference=wildcards.reference)
    output:
        "mapping/bowtie2/{mapping_params}/{reference}/samples/{sample}.bam"
    run:
        if len(input) > 1:
            shell("{config[samtools_rules][load_env]} && "
                  "samtools merge {output} {input}")
        else:
            shell("ln -fs ../units/{basename} {{output}} && touch -h "
                  "{{output}}".format(basename=os.path.basename(input[0])))
