import glob
import os

def all_samples():
    return [d.split('/')[-1] for d in glob.glob("samples/*") if os.path.isdir(d)]

def locustag_for_sample(wildcards, default, config):
    try:
        return config["prokka_extended_rules"]["locustags"][wildcards.sample]
    except KeyError:
        return default 

rule prokka_extended_run:
    input: 
        lambda wildcards: config["prokka_extended_rules"]["contigs"][wildcards.sample]
    output: 
        ["annotation/prokka_extended/prokka_output/{{sample}}/PROKKA.{0}".format(ext) for ext in ['gff', 'faa', 'ffn']]
    params:
        PROKKA_OPS = config["prokka_extended_rules"]['prokka_ops'],
        PROKKA_NAME = config["prokka_extended_rules"]['prokka_name'],
        threads = config["prokka_extended_rules"]["threads"],
        locustag = lambda wildcards: locustag_for_sample(wildcards, "PROKKA_MOD", config)
    run:
        regex = re.compile('\.(\w*)')
        outdir = "annotation/prokka_extended/prokka_output/{wildcards.sample}"
        if params.locustag == "PROKKA_MOD":
            Warning("Locustag for sample {} is PROKKA_MOD, if this sample is a part of a bigger dataset, consider using a unique locustag".format(wildcards.sample))

        shell("""{{config[prokka_extended_rules][load_env]}}
                {{params.PROKKA_NAME}} --cpus 16 {{input}} --outdir {0} {{params.PROKKA_OPS}} --force --norrna --notrna --prefix PROKKA --locustag {{params.locustag}}""".format(outdir))



def rpsblast_parameter_db_combo(wildcards):
    files = []
    for db in config["prokka_extended_rules"]["dbs"]:
        parameters = config["prokka_extended_rules"]["rpsblast_parameter_set"][db]
        files.append("blast/rpsblast/{parameters}/{db}/{{sample}}/rpsblast.out".format(db=db, parameters=parameters).format(**wildcards))
    return files
        

# This one is a bit tricky, it needs to be run in serial
rule prokka_extended_output:
    input: 
        blast_output = lambda wildcards: rpsblast_parameter_db_combo(wildcards),
        ext_file = "annotation/prokka_extended/prokka_output/{sample}/PROKKA.{ext}"
    output: "annotation/prokka_extended/prokka_extended/{sample}/PROKKA.all.{ext}"
    params:
        cddid_all = config["prokka_extended_rules"]["cddid_all"]
    run:
        input_ext = input.ext_file
        cmds = ["{config[prokka_extended_rules][load_env]} && mkdir -p prokka_extended"]
        ext = wildcards.ext
        extend_bin = config["prokka_extended_rules"]["EXTEND"][ext]
        db_regex = re.compile('/(\w*)/[^/]*/rpsblast.out')
        for blast_file in input.blast_output:
            db = db_regex.findall(blast_file)[0]
            if config["prokka_extended_rules"]["multiple_annotations_per_gene"][db] == "true":
                ma_per_gene = "--multiple-annotations-per-gene"
            else:
                ma_per_gene = ""
            output_ext = input_ext.replace(".{0}".format(ext), '.{0}.{1}'.format(db, ext))
            outdir = "prokka_extended/{0}".format(wildcards.sample)
            cmds.append("mkdir -p {0} && {{extend_bin}} -b {1} -g {2} --cddid_all_file {{params.cddid_all}} --include-evalue --include-pident {3} > {4}".format(outdir, blast_file, input_ext, ma_per_gene, output_ext))
            input_ext = output_ext
        cmds.append("cp {0} {{output}}".format(output_ext))
        cmd = " && ".join(cmds)
        shell(cmd)
    

rule prokka_extended_all:
    input: expand("annotation/prokka_extended/prokka_extended/{sample}/PROKKA.all.gff", sample=config["prokka_extended_rules"]["contigs"])


rule prokka_extended_get_prokka_annotation:
    input: "annotation/prokka_extended/prokka_extended/{sample}/PROKKA.all.gff"
    output: "annotation/prokka_extended/summary_per_sample/{sample}/{sample}.{type}.tsv"
    params:
        get_prokka_annotation_script = config["prokka_extended_rules"]["get_prokka_annotation_script"],
        with_evalue = "--with_evalue" if config["prokka_extended_rules"]["include_evalue_for_tables"] == "true" else ""
    shell:
        """{config[prokka_extended_rules][load_env]}
            python {params.get_prokka_annotation_script} {input} {wildcards.type} {params.with_evalue} > {output}"""

rule prokka_extended_get_prokka_annotation_all_samples:
    input: expand("annotation/prokka_extended/summary_per_sample/{sample}/{sample}.{{type}}.tsv", sample = config["prokka_extended_rules"]["contigs"])
    output: "annotation/prokka_extended/summary_annotation/{type}.tsv" 
    shell:
        """cat {input} > {output}"""

rule prokka_extended_collate_annotations:
    input: expand("annotation/prokka_extended/summary_per_sample/{sample}/{sample}.{{type}}.tsv", sample=config["prokka_extended_rules"]["contigs"])
    output: "annotation/prokka_extended/summary_table/all.{type}.tsv"
    params:
        collate_annotations_script = config["prokka_extended_rules"]["collate_annotations_script"]
    shell:
        """{config[prokka_extended_rules][load_env]}
            python {params.collate_annotations_script} <(for file in {input}; do echo $file; done ) > {output}"""


rule prokka_extended_summarize_all:
    input: expand("annotation/prokka_extended/summary_table/all.{type}.tsv", type=[db.upper() for db in config["prokka_extended_rules"]["dbs"]])

rule prokka_summarize_cog_categories:
    input: "annotation/prokka_extended/summary_per_sample/{sample}/{sample}.COG.tsv"
    output: "annotation/prokka_extended/summary_per_sample/{sample}/COG_categories.tsv"
    params:
        cog_categories_data = config["prokka_extended_rules"]["cog_categories_data"],
        cog_categories_script = config["prokka_extended_rules"]["cog_categories_script"]
    shell:
        """{config[prokka_extended_rules][load_env]}
            python {params.cog_categories_script} {input} {params.cog_categories_data} > {output}"""

rule prokka_summarize_cog_categories_all:
    input: expand("annotation/prokka_extended/summary_per_sample/{sample}/COG_categories.tsv", sample=config["prokka_extended_rules"]["contigs"])


rule prokka_extended_merge_annotated_sequences:
    input: lambda wildcards: expand("annotation/prokka_extended/prokka_output/{sample}/PROKKA.ffn", sample=config["prokka_extended_rules"]["merging_sample_sets"][wildcards.sample_set])
    output: "annotation/prokka_extended/all_annotated_sequences/{sample_set}/PROKKA.ffn"
    shell:
        """cat {input} > {output}"""

rule prokka_extended_merge_annotated_sequences_all:
    input: 
        expand("annotation/prokka_extended/all_annotated_sequences/{sample_set}/PROKKA.ffn", 
            sample_set=config["prokka_extended_rules"]["merging_sample_sets"])

rule prokka_extended_gff_to_bed:
    input: "annotation/prokka_extended/prokka_output/{sample}/PROKKA.gff"
    output: "annotation/prokka_extended/prokka_output/{sample}/PROKKA.bed"
    params:
        gff_to_bed_script = config["prokka_extended_rules"]["gff_to_bed_script"]
    shell:
        """{params.gff_to_bed_script} {input} > {output}"""

rule prokka_extended_merge_bed:
    input: lambda wildcards: expand("annotation/prokka_extended/prokka_output/{sample}/PROKKA.bed", sample=config["prokka_extended_rules"]["merging_sample_sets"][wildcards.sample_set])
    output:
        "annotation/prokka_extended/all_genes_as_bed/{sample_set}/PROKKA.bed"
    shell:
        """cat {input} > {output}"""

