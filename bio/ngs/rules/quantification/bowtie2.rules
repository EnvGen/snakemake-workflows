import os
import glob

# Check values in config file
CONFIG_REQS = ["references", "samples", "mapping_params", "scripts_dir"]
if "bowtie2_quant_rules" not in config:
    raise(Exception("bowtie2_quant key not in config file"))
for cr in CONFIG_REQS:
    if cr not in config["bowtie2_quant_rules"]:
        raise(Exception("{cr} not in bowtie2_quant_rules config file".format(cr=cr)))

def histogram_bam_input(mapping_params, sample, reference):
    if sample in config["bowtie2_quant_rules"]["rna_samples"]:
        bam_ending = ".namesorted.bam"
    else:
        bam_ending = ".removeduplicates.namesorted.bam"

    bam_unformatted_s = "mapping/bowtie2/{mapping_params}/{reference}/samples/{sample}.sorted{bam_ending}"
    return bam_unformatted_s.format(
                mapping_params = mapping_params,
                sample = sample,            
                reference = reference,
                bam_ending = bam_ending)


rule bowtie2_quant_genes_htseq_counts:
    input:
        bam = lambda wildcards: histogram_bam_input(
                    wildcards.mapping_params, 
                    wildcards.sample, 
                    config["bowtie2_quant_rules"]["reference_for_ref_set"][wildcards.split_ref_set]),
        gff2 = lambda wildcards: "annotation/{gene_prediction}/all_annotated_sequences/{split_ref_set}/proteins.gff2".format(gene_prediction=config["bowtie2_quant_rules"]["gene_prediction"], split_ref_set=wildcards.split_ref_set)
    output:
        htseq_counts = "quantification/bowtie2_genes/{mapping_params}/{split_ref_set}/{sample}/read_counts.htseq.tsv.gz"
    shell:
        """
            {config[bowtie2_quant_rules][load_htseq_env]}
            htseq-count -f 'bam' -r 'name' -s 'no' -a 0 -t 'CDS' -i 'ID' -m 'union' {input.bam} {input.gff2} | gzip > {output}
        """

UNIT_TO_SAMPLE = {
    unit: sample for sample, units in config["bowtie2_rules"]["samples"].items()
    for unit in units}

rule bowtie2_quant_read_length:
    input:
        read_files = lambda wildcards: config['bowtie2_rules']['units'][wildcards.sample]
    output:
        "quantification/bowtie2_genes/read_lengths/{sample_group}/{sample}.tsv"
    params:
        read_length_script = config['bowtie2_quant_rules']['read_length_script']
    shell:
        """python {params.read_length_script} <(cat <(seqtk sample -s11 {input.read_files[0]} 1000) <(seqtk sample -s11 {input.read_files[1]} 1000)) --sample_name {wildcards.sample} >> {output}"""
    

rule bowtie2_quant_read_length_sample_group:
    input:
        lambda wildcards: expand("quantification/bowtie2_genes/read_lengths/{sample_group}/{sample}.tsv", 
                                    sample=config["bowtie2_quant_rules"]["sample_groups"][wildcards.sample_group], 
                                    sample_group=wildcards.sample_group)
    output:
        "quantification/bowtie2_genes/read_lengths/{sample_group}.tsv"
    shell:
        """cat {input} > {output}"""

rule bowtie2_tpm_gene_table:
    input:
        counts = lambda wildcards: expand("quantification/bowtie2_genes/{mapping_params}/{split_ref_set}/{sample}/read_counts.htseq.tsv.gz", 
            mapping_params = wildcards.mapping_params,
            split_ref_set = wildcards.split_ref_set,
            sample = config["bowtie2_quant_rules"]["sample_groups"][wildcards.sample_group]
        ),
        read_lengths = "quantification/bowtie2_genes/read_lengths/{sample_group}.tsv",
        gff2 = lambda wildcards: "annotation/{gene_prediction}/all_annotated_sequences/{split_ref_set}/proteins.gff2".format(gene_prediction=config["bowtie2_quant_rules"]["gene_prediction"], split_ref_set=wildcards.split_ref_set)
    output:
        "quantification/bowtie2_genes/{mapping_params}/{split_ref_set}/{sample_group}/tpm_table.tsv.gz"
    run:
        sample_names = ["/".join([os.path.dirname(fn).split('/')[-1]]) for fn in input.counts]
        shell("""{config[bowtie2_quant_rules][load_env]}
            python {config[bowtie2_quant_rules][tpm_table_script]} \
                --sample_names {sample_names} \
                --coverage_files {input.counts} \
                --sample_info {input.read_lengths} \
                --gff {input.gff2} \
                --input_compression 'gzip'  | gzip > {output}
        """)


rule bowtie2_raw_counts_gene_table:
    input:
        counts = lambda wildcards: expand("quantification/bowtie2_genes/{mapping_params}/{split_ref_set}/{sample}/read_counts.htseq.tsv.gz", 
            mapping_params = wildcards.mapping_params,
            split_ref_set = wildcards.split_ref_set,
            sample = config["bowtie2_quant_rules"]["sample_groups"][wildcards.sample_group]
        ),
        gff2 = lambda wildcards: "annotation/{gene_prediction}/all_annotated_sequences/{split_ref_set}/proteins.gff2".format(gene_prediction=config["bowtie2_quant_rules"]["gene_prediction"], split_ref_set=wildcards.split_ref_set)
    output:
        "quantification/bowtie2_genes/{mapping_params}/{split_ref_set}/{sample_group}/raw_counts_table.tsv.gz"
    run:
        sample_names = ["/".join([os.path.dirname(fn).split('/')[-1]]) for fn in input.counts]
        shell("""{config[bowtie2_quant_rules][load_env]}
            python {config[bowtie2_quant_rules][raw_counts_table_script]} \
                --sample_names {sample_names} \
                --coverage_files {input.counts} \
                --gff {input.gff2} \
                --input_compression 'gzip' | gzip > {output}
        """)

rule bowtie2_quant_rpkm_gene_all:
    input:
        expand("quantification/bowtie2_genes/{mapping_params}/{split_ref_set}/{sample_group}/{count_unit}_table.tsv.gz",
            mapping_params = config["bowtie2_quant_rules"]["mapping_params"], \
            split_ref_set = config["bowtie2_quant_rules"]["split_ref_sets"], \
            sample_group = config["bowtie2_quant_rules"]["sample_groups"], \
            count_unit = config["bowtie2_quant_rules"]["count_units"]
        )


rule bowtie2_quant_coverage_annotation_table:
    input:
        counts_table = "quantification/bowtie2_genes/{mapping_params}/{split_ref_set}/{sample_group}/{count_unit}_table.tsv.gz",
        annotation_table = lambda wildcards: expand("annotation/{type}/summary_annotation/{gene_prediction}/all.{type}.standardized.tsv", type=wildcards.type,gene_prediction=config["bowtie2_quant_rules"]["gene_prediction"]),
        annotation_info = "annotation/annotation_info/{type}/annotation_info.tsv"
    output:
        "quantification/bowtie2_genes/{mapping_params}/{split_ref_set}/annotations/{sample_group}/{type}.{count_unit}.annotated.tsv.gz"
    params:
        counts_annotations_table_script = config["bowtie2_quant_rules"]["rpkm_annotations_table_script"],
        tmp_dir = config["global_tmp_dir"]
    shell:
        """{config[bowtie2_quant_rules][load_env]}
            python {params.counts_annotations_table_script} {input.counts_table} {input.annotation_table} > {params.tmp_dir}/unannotated.tsv
            join -t '	' <(tail -n +2 {input.annotation_info} | sort -k 1b,1) <(tail -n +2 {params.tmp_dir}/unannotated.tsv | sort -k 1b,1) > {params.tmp_dir}/annotated_no_head.tsv
            paste <(head -n 1 {input.annotation_info}) <(head -n 1 {params.tmp_dir}/unannotated.tsv | cut -f 2- ) > {params.tmp_dir}/header.tsv
            cat {params.tmp_dir}/header.tsv {params.tmp_dir}/annotated_no_head.tsv | gzip > {output}
            rm {params.tmp_dir}/annotated_no_head.tsv {params.tmp_dir}/header.tsv {params.tmp_dir}/unannotated.tsv
        """


rule bowtie2_quant_coverage_annotation_table_all:
    input: expand("quantification/bowtie2_genes/{mapping_params}/{split_ref_set}/annotations/{sample_group}/{type}.{count_unit}.annotated.tsv.gz", \
        mapping_params = config["bowtie2_quant_rules"]["mapping_params"], \
        split_ref_set = config["bowtie2_quant_rules"]["split_ref_sets"], \
        type = config["prodigal_rules"]["dbs"], \
        sample_group = config["bowtie2_quant_rules"]["sample_groups"], \
        count_unit = config["bowtie2_quant_rules"]["count_units"])

