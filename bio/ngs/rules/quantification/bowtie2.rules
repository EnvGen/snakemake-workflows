import os
import glob

# Check values in config file
CONFIG_REQS = ["references", "samples", "mapping_params", "scripts_dir"]
if "bowtie2_quant_rules" not in config:
    raise(Exception("bowtie2_quant key not in config file"))
for cr in CONFIG_REQS:
    if cr not in config["bowtie2_quant_rules"]:
        raise(Exception("{cr} not in bowtie2_quant_rules config file".format(cr=cr)))

rule bowtie2_quant_genes_histogram:
    input:
        bam = lambda wildcards: ("mapping/bowtie2/{mapping_params}/{reference}"
                     "/samples/{sample}.sorted.removeduplicates.bam").format(
            mapping_params = wildcards.mapping_params,
            sample = wildcards.sample,            
            reference = \
                config["bowtie2_quant_rules"]["reference_for_ref_set"][wildcards.split_ref_set],
                ),
        bed = "annotation/prokka_extended/all_genes_as_bed/{split_ref_set}/PROKKA.bed"
    output:
        histogram = ("quantification/bowtie2_genes/{mapping_params}/"
                    "{split_ref_set}/{sample}/histogram.tsv"),
    shell:
        """
        {config[bowtie2_quant_rules][load_env]}
        bedtools coverage -hist -a {input.bed} -b {input.bam} > {output.histogram}
        """

rule bowtie2_quant_genes:
    input:
        histogram = ("quantification/bowtie2_genes/{mapping_params}/"
                    "{split_ref_set}/{sample}/histogram.tsv")
    output:
        coverage = ("quantification/bowtie2_genes/{mapping_params}/"
                    "{split_ref_set}/{sample}/avg_cov.tsv")
    params:
        coverage_for_genes = config["bowtie2_quant_rules"]["coverage_for_genes_script"]
    shell:
        """
        {config[bowtie2_quant_rules][load_env]}
        {params.coverage_for_genes} {input.histogram} > {output.coverage}
        """


rule bowtie2_quant_coverage_table:
    input:
        asm=lambda wildcards: config["bowtie2_quant_rules"]["references"][wildcards.reference],
        bedcovs=expand(("mapping/{mapper}/{mapping_params}/{{reference}}/samples/"
                        "{sample}.sorted.removeduplicates.coverage.tsv"),
                   sample=config["bowtie2_quant_rules"]["samples"],
                   mapper=config["bowtie2_quant_rules"]["mapper"],
                   mapping_params=config["bowtie2_quant_rules"]["mapping_params"])
    output:
        "quantification/bowtie2/{reference}/avg_cov.tsv",
    params:
        sample_names=sorted(config["bowtie2_quant_rules"]["samples"])
    shell:
        """
        {config[bowtie2_quant_rules][load_env]}
        python {config[bowtie2_quant_rules][scripts_dir]}/gen_input_table.py --isbedfiles \
            --samplenames <(for sample in {params.sample_names}; do echo $sample; done) \
                {input.asm} {input.bedcovs} \
                > {output}
        """

rule bowtie2_quant_coverage_table_all:
    input: 
        expand("quantification/bowtie2/{reference}/avg_cov.tsv",
            reference=config["bowtie2_quant_rules"]["references"])

rule bowtie2_rpkm_gene_table:
    input:
        coverage = expand("quantification/bowtie2_genes/{{mapping_params}}/{{split_ref_set}}/{sample}/avg_cov.tsv", sample = config["bowtie2_quant_rules"]["samples"]),
        sample_info = "quantification/bowtie2_genes/sample_info.tsv"
    output:
        "quantification/bowtie2_genes/{mapping_params}/{split_ref_set}/rpkm_table.tsv"
    run:
        sample_names = ["/".join([os.path.dirname(fn).split('/')[-1]]) for fn in input.coverage]
        shell("""{config[bowtie2_quant_rules][load_env]}
            python {config[bowtie2_quant_rules][rpkm_table_script]} \
                --sample_names {sample_names} \
                --coverage_files {input.coverage} \
                --sample_info {input.sample_info} > {output}
        """)

rule bowtie2_quant_coverage_annotation_table:
    input:
        rpkm_table = "quantification/bowtie2_genes/{mapping_params}/{split_ref_set}/rpkm_table.tsv",
        annotation_table = "annotation/prokka_extended/summary_annotation/{type}.tsv"
    output:
        "quantification/bowtie2_genes/{mapping_params}/{split_ref_set}/annotations/{type}.tsv"
    params:
        rpkm_annotations_table_script = config["bowtie2_quant_rules"]["rpkm_annotations_table_script"]
    shell:
        """{config[bowtie2_quant_rules][load_env]}
            python {params.rpkm_annotations_table_script} {input.rpkm_table} {input.annotation_table} > {output}
        """

rule bowtie2_quant_coverage_annotation_table_all:
    input: expand("quantification/bowtie2_genes/{mapping_params}/{split_ref_set}/annotations/{type}.tsv", \
        mapping_params = config["bowtie2_quant_rules"]["mapping_params"], \
        split_ref_set = config["bowtie2_quant_rules"]["split_ref_sets"], \
        type = [db.upper() for db in config["prokka_extended_rules"]["dbs"]])

rule bowtie2_quant_rpkm_gene_all:
    input:
        expand("quantification/bowtie2_genes/{mapping_params}/{split_ref_set}/rpkm_table.tsv",
            mapping_params = config["bowtie2_quant_rules"]["mapping_params"],
            split_ref_set = config["bowtie2_quant_rules"]["split_ref_sets"])
