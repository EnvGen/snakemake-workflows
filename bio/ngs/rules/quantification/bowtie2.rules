import os
import glob

# Check values in config file
CONFIG_REQS = ["references", "samples", "mapping_params", "scripts_dir"]
if "bowtie2_quant_rules" not in config:
    raise(Exception("bowtie2_quant key not in config file"))
for cr in CONFIG_REQS:
    if cr not in config["bowtie2_quant_rules"]:
        raise(Exception("{cr} not in bowtie2_quant_rules config file".format(cr=cr)))

rule bowtie2_quant_genes_histogram:
    input:
        bam = lambda wildcards: ("mapping/bowtie2/{mapping_params}/{reference}"
                     "/samples/{sample}.sorted.bam").format(
            mapping_params = wildcards.mapping_params,
            sample = wildcards.sample,            
            reference = \
                config["bowtie2_quant_rules"]["reference_for_ref_set"][wildcards.split_ref_set],
                ),
        bed = "annotation/prokka_extended/all_genes_as_bed/{split_ref_set}/PROKKA.bed"
    output:
        histogram = ("quantification/bowtie2_genes/{mapping_params}/"
                    "{split_ref_set}/{sample}/histogram.tsv"),
    shell:
        """
        {config[bowtie2_quant_rules][load_env]}
        bedtools coverage -hist -a {input.bed} -b {input.bam} > {output.histogram}
        """

rule bowtie2_quant_genes:
    input:
        histogram = ("quantification/bowtie2_genes/{mapping_params}/"
                    "{split_ref_set}/{sample}/histogram.tsv")
    output:
        coverage = ("quantification/bowtie2_genes/{mapping_params}/"
                    "{split_ref_set}/{sample}/avg_cov.tsv")
    params:
        coverage_for_genes = config["bowtie2_quant_rules"]["coverage_for_genes_script"]
    shell:
        """
        {config[bowtie2_quant_rules][load_env]}
        {params.coverage_for_genes} {input.histogram} > {output.coverage}
        """

rule bowtie2_quant:
    input:
        asm=lambda wildcards: config["bowtie2_quant_rules"]["references"][wildcards.reference],
        bedcovs=expand(("mapping/{mapper}/{mapping_params}/{{reference}}/samples/"
                        "{{sample}}.sorted.removeduplicates.coverage.tsv"),
                   mapper=config["bowtie2_quant_rules"]["mapper"],
                   mapping_params=config["bowtie2_quant_rules"]["mapping_params"])
    output:
        "quantification/bowtie2/{reference}/{sample}/avg_cov.tsv",
    shell:
        """
        {config[bowtie2_quant_rules][load_env]}
        python {config[bowtie2_quant_rules][scripts_dir]}/gen_input_table.py --isbedfiles \
            --samplenames <(echo {wildcards.sample}) \
                {input.asm} {input.bedcovs} \
                > {output}
        """


rule bowtie2_quant_all:
    input:
        expand("quantification/bowtie2/{reference}/{sample}/avg_cov.tsv", 
            reference=config["bowtie2_quant_rules"]["references"],
            sample=config["bowtie2_quant_rules"]["samples"])

rule bowtie2_quant_genes_all:
    input:
        expand("quantification/bowtie2_genes/{mapping_params}/{split_ref_set}/{sample}/avg_cov.tsv",
            mapping_params = config["bowtie2_quant_rules"]["mapping_params"],
            split_ref_set = config["bowtie2_quant_rules"]["split_ref_sets"],
            sample = config["bowtie2_quant_rules"]["samples"])
