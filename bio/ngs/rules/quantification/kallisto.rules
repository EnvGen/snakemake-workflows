rule kallisto_index:
    input:
        lambda wildcards: config["kallisto_rules"]["references"][wildcards.reference]
    output:
        "quantification/kallisto/indices/{reference}.kaix"
    shell:
        """
        {config[kallisto_rules][load_env]}
        kallisto index {input} -i {output}
        """

rule kallisto_quant_sample:
    input:
        reads=lambda wildcards: config["kallisto_rules"]["samples"][wildcards.sample],
        index="quantification/kallisto/indices/{reference}.kaix"
    output:
        "quantification/kallisto/quant/{reference}/samples/{sample}/abundance.tsv.gz"
    params:
        outdir = "quantification/kallisto/quant/{reference}/samples/{sample}"
    shell:
        """
        {config[kallisto_rules][load_env]}
        kallisto quant --threads 16 --plaintext -i {input.index} -o {params.outdir} {input.reads}
        gzip {params.outdir}/abundance.tsv
        """

rule kallisto_sample_merge:
    """
    Merge the abundance files for multiple units into one for the given sample.
    If the sample has only one unit, a symlink will be created.
    """
    input:
        lambda wildcards: expand(
            "quantification/kallisto/quant/{reference}/units/{unit}/abundance.tsv",
            unit=config["kallisto_rules"]["samples"][wildcards.sample],
            reference=wildcards.reference)
    output:
        "quantification/kallisto/quant/{reference}/samples/{sample}/abundance.tsv"
    run:
        unit_name = input[0].split('/')[-2]
        if len(input) > 1:
            shell("echo 'Not implemented'")
        else:
            shell("ln -fs ../../units/{unit}/abundance.tsv {{output}} && touch -h "
                  "{{output}}".format(unit = unit_name))

#ruleorder: kallisto_sample_merge > kallisto_quant_sample

rule kallisto_quant_all:
    input:
        expand("quantification/kallisto/quant/{reference}/samples/{sample}/abundance.tsv",
            reference=config["kallisto_rules"]["references"],
            sample=config["kallisto_rules"]["samples"]) 

rule kallisto_concoct_inputtable:
    input:
        lambda wildcards: expand("quantification/kallisto/quant/{reference}_10K/samples/{{sample}}/abundance.tsv.gz".format(reference=wildcards.assembly),
            sample=sorted(config["kallisto_rules"]["samples"]))
    output:
        "binning/concoct/{assembly}/input_kallisto/concoct_inputtableR.tsv"
    params:
        sample_names=sorted(config["kallisto_rules"]["samples"])
    shell:
        """
        {config[kallisto_rules][load_env]}
        python {config[kallisto_rules][inputtable_script]} \
            --samplenames <(for s in {params.sample_names}; do echo $s; done) \
                {input} > {output}
        """

rule kallisto_concoct_inputtable_10K_all:        
    input:
        expand("quantification/kallisto/inputtable_10K/{reference}/concoct_inputtableR.tsv",
            reference=config["kallisto_rules"]["references"])
