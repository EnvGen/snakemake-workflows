rule bowtie2_quant_genes_histogram:
    input:
        bam = lambda wildcards: histogram_bam_input(
                    wildcards.mapping_params, 
                    wildcards.sample, 
                    config["bowtie2_quant_rules"]["reference_for_ref_set"][wildcards.split_ref_set]),
        bed = lambda wildcards: "annotation/{gene_prediction}/all_annotated_sequences/{split_ref_set}/proteins.bed".format(gene_prediction=config["bowtie2_quant_rules"]["gene_prediction"], split_ref_set=wildcards.split_ref_set)
    output:
        histogram = ("quantification/bowtie2_genes/{mapping_params}/"
                    "{split_ref_set}/{sample}/histogram.tsv"),
    shell:
        """
        {config[bowtie2_quant_rules][load_env]}
        bedtools coverage -hist -a {input.bed} -b {input.bam} > {output.histogram}
        """

rule bowtie2_quant_genes:
    input:
        histogram = ("quantification/bowtie2_genes/{mapping_params}/"
                    "{split_ref_set}/{sample}/histogram.tsv")
    output:
        coverage = ("quantification/bowtie2_genes/{mapping_params}/"
                    "{split_ref_set}/{sample}/avg_cov.tsv.gz")
    params:
        coverage_for_genes = config["bowtie2_quant_rules"]["coverage_for_genes_script"]
    shell:
        """
        {config[bowtie2_quant_rules][load_env]}
        {params.coverage_for_genes} {input.histogram} | gzip > {output.coverage}
        """


rule bowtie2_quant_coverage_table:
    input:
        asm=lambda wildcards: config["bowtie2_quant_rules"]["references"][wildcards.reference],
        bedcovs=expand(("mapping/{mapper}/{mapping_params}/{{reference}}/samples/"
                        "{sample}.sorted.removeduplicates.coverage.tsv"),
                   sample=config["bowtie2_quant_rules"]["samples"],
                   mapper=config["bowtie2_quant_rules"]["mapper"],
                   mapping_params=config["bowtie2_quant_rules"]["mapping_params"])
    output:
        "quantification/bowtie2/{reference}/avg_cov.tsv.gz",
    params:
        sample_names=sorted(config["bowtie2_quant_rules"]["samples"])
    shell:
        """
        {config[bowtie2_quant_rules][load_env]}
        python {config[bowtie2_quant_rules][scripts_dir]}/gen_input_table.py --isbedfiles \
            --samplenames <(for sample in {params.sample_names}; do echo $sample; done) \
                {input.asm} {input.bedcovs} | gzip \
                > {output}
        """

rule bowtie2_quant_coverage_table_all:
    input: 
        expand("quantification/bowtie2/{reference}/avg_cov.tsv.gz",
            reference=config["bowtie2_quant_rules"]["references"])

rule bowtie2_rpkm_gene_table:
    input:
        coverage = lambda wildcards: expand("quantification/bowtie2_genes/{mapping_params}/{split_ref_set}/{sample}/avg_cov.tsv.gz", 
            mapping_params = wildcards.mapping_params,
            split_ref_set = wildcards.split_ref_set,
            sample = config["bowtie2_quant_rules"]["sample_groups"][wildcards.sample_group]
        ),
        sample_info = "quantification/bowtie2_genes/sample_info_with_nr_reads.tsv"
    output:
        "quantification/bowtie2_genes/{mapping_params}/{split_ref_set}/{sample_group}/rpkm_table.tsv.gz"
    run:
        sample_names = ["/".join([os.path.dirname(fn).split('/')[-1]]) for fn in input.coverage]
        shell("""{config[bowtie2_quant_rules][load_env]}
            python {config[bowtie2_quant_rules][rpkm_table_script]} \
                --sample_names {sample_names} \
                --coverage_files {input.coverage} \
                --sample_info {input.sample_info}  | gzip > {output}
        """)
