# vim: syntax=python tabstop=4 expandtab
# coding: utf-8


"""
Rules for analysing mapping to reference genomes when adding internal dna standards.

For usage, include this in your workflow.
"""


__author__ = "Johannes Alneberg"
__license__ = "MIT"


rule internal_standards_link_mapping:
    input:
        lambda wildcards: "mapping/bowtie2/{mapping_params}/{internal_reference}/units/{sample}.bam".format(mapping_params = config["internal_standards"]["mapping_params"],
        internal_reference = config["internal_standards"]["sample_to_reference"][wildcards.sample],
        sample = wildcards.sample)
    output:
        "internal_standards/mapping/{sample}.bam"
    shell:
        """ln -s ../../{input} {output}"""

 
rule internal_standards_bamtools_split:
    input:
        "internal_standards/mapping/{sample}.bam"
    output:
        mapped =   "internal_standards/mapping/{sample}.MAPPED.bam",
        unmapped = "internal_standards/mapping/{sample}.UNMAPPED.bam"
    params:
        load_env = config["internal_standards"]["load_env"]
    shell:
        """{params.load_env}
           bamtools split -mapped -in {input}""" 


rule internal_standards_sync_bam:
    input:
        "internal_standards/mapping/{sample}.UNMAPPED.bam"
    output:
        "internal_standards/mapping/{sample}.UNMAPPED.sync.bam"
    params:
        load_env = config["internal_standards"]["load_env"]
    shell:
        """{params.load_env}
           bamtools filter -isMateMapped false -in {input} -out {output}"""

rule internal_standards_bam_to_fastq:
    input:
        "internal_standards/mapping/{sample}.UNMAPPED.sync.bam"
    output:
        R1 = "internal_standards/unmapped_reads/{sample}_R1.fq.gz",
        R2 = "internal_standards/unmapped_reads/{sample}_R2.fq.gz"
    params:
        load_env = config["internal_standards"]["load_env"]
    shell:
        """{params.load_env}
           bamtools filter -isFirstMate true -in {input} | bamtools convert -format fastq | gzip -c > {output.R1}
           bamtools filter -isFirstMate false -in {input} | bamtools convert -format fastq | gzip -c > {output.R2}
        """


rule internal_standards_sync_mapped_bam:
    input:
        "internal_standards/mapping/{sample}.MAPPED.bam"
    output:
        "internal_standards/mapping/{sample}.MAPPED.sync.bam"
    params:
        load_env = config["internal_standards"]["load_env"]
    shell:
        """{params.load_env}
           bamtools filter -isMateMapped true -in {input} -out {output}"""

rule internal_standards_mapped_bam_to_fastq:
    input:
        "internal_standards/mapping/{sample}.MAPPED.sync.bam"
    output:
        R1 = "internal_standards/reference_mapped_reads/{sample}_R1.fq.gz",
        R2 = "internal_standards/reference_mapped_reads/{sample}_R2.fq.gz"
    params:
        load_env = config["internal_standards"]["load_env"]
    shell:
        """{params.load_env}
           bamtools filter -isFirstMate true -in {input} | bamtools convert -format fastq | gzip -c > {output.R1}
           bamtools filter -isFirstMate false -in {input} | bamtools convert -format fastq | gzip -c > {output.R2}
        """

rule internal_standards_blast_database:
    input:
        internal_reference = "internal_standards/references/{reference}/Contigs.fa"
    output:
        expand("internal_standards/blast_genome_coverage/db/{{reference}}/Contigs.fa.{ext}", ext=["nhr", "nin", "nsq"])
    params:
        database_name="internal_standards/blast_genome_coverage/db/{reference}/Contigs.fa",
        load_env = config["internal_standards"]["load_env"]
    shell:
        """{params.load_env}
           makeblastdb -in {input} -out {params.database_name} -input_type fasta -dbtype nucl
        """

rule internal_standards_blast_search:
    input:
        database_files = lambda wildcards: expand("internal_standards/blast_genome_coverage/db/{genome_reference}/Contigs.fa.{ext}", ext=["nhr", "nin", "nsq"], genome_reference=wildcards.genome_reference),
        query = lambda wildcards: config["bowtie2_rules"]["references"][wildcards.reference]
    output:
        "internal_standards/blast_genome_coverage/results/{genome_reference}/{reference}/blast.out"
    params:
        database_name="internal_standards/blast_genome_coverage/db/{genome_reference}/Contigs.fa",
        load_env = config["internal_standards"]["load_env"]
    shell:
        """{params.load_env}
            zcat {input.query} | \
                parallel \
                    --pipe -k --block 100k --recstart '>' --no-notice \
                    blastn -db {params.database_name} -query - -outfmt 6 > {output}
        """

rule internal_standards_all:
    input:
        R1 = expand("internal_standards/unmapped_reads/{sample}_R1.fq.gz",
                sample = config["internal_standards"]["samples"]),
        R2 = expand("internal_standards/unmapped_reads/{sample}_R2.fq.gz",
                sample = config["internal_standards"]["samples"]),
        R1_map = expand("internal_standards/reference_mapped_reads/{sample}_R1.fq.gz",
                sample = config["internal_standards"]["samples"]),
        R2_map = expand("internal_standards/reference_mapped_reads/{sample}_R2.fq.gz",
                sample = config["internal_standards"]["samples"]),
        mapped_bam = expand("internal_standards/mapping/{sample}.MAPPED.sorted.bam",
            sample = config["internal_standards"]["samples"])

